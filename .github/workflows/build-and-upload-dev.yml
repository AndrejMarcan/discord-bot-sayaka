name: Build And Upload

on:
  pull_request:
    branches:
      - dev
    types: [closed]

jobs:
  build:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Docker login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME_DEV }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_KEY_DEV }}
          IMAGE_TAG: ${{ github.sha }}
        run : docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD" docker.io
      - name: Build the Docker image
        run: docker build . --file dockerfile --tag ${{secrets.DOCKER_HUB_USERNAME_DEV}}/${{secrets.DOCKER_HUB_REPOSITORY_DEV}}:${{ github.sha }}
      - name: Publish Docker image to docker hub
        run: docker push ${{secrets.DOCKER_HUB_USERNAME_DEV}}/${{secrets.DOCKER_HUB_REPOSITORY_DEV}}:${{ github.sha }}

      - name: Build Docker image with latest tag
        run: docker build . --file dockerfile --tag ${{secrets.DOCKER_HUB_USERNAME_DEV}}/${{secrets.DOCKER_HUB_REPOSITORY_DEV}}:latest
      - name: Publish Docker image to docker hub
        run: docker push ${{secrets.DOCKER_HUB_USERNAME_DEV}}/${{secrets.DOCKER_HUB_REPOSITORY_DEV}}:latest

      - name: Trigger deployment of new image
        run: |
          response=$(curl --write-out "%{http_code}" --silent --output /dev/null \
                     --request POST \
                     --header 'Content-Type: application/json' \
                     --header 'Authorization: Bearer ${{secrets.DIGITAL_OCEAN_API_TOKEN}}' \
                     --data '{"force_build": true}' \
                     --url https://api.digitalocean.com/v2/apps/${{secrets.DIGITAL_OCEAN_APP_ID_DEV}}/deployments)
          if [ "$response" -eq 200 ]; then
            echo "Deployment triggered successfully."
            exit 0
          else
            echo "Deployment failed with status code $response."
            exit 1
          fi